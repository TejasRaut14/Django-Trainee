# -*- coding: utf-8 -*-
"""Django Trainee .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jnEIsaumtFaHLPggKeg44JSEAoXP8w_u

Questions for Django Trainee at Accuknox

# New Section
Question 1: By default are django signals executed synchronously or asynchronously? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic

Answer - Django signals are executed synchronously by default
"""

from django.db.models.signals import post_save
from django.dispatch import receiver

from .models import MyModel

@receiver(post_save, sender=MyModel)
def my_signal_handler(sender, instance, **kwargs):
    print("Signal handler executed synchronously")
    # Do something with the instance here

"""Question 2: Do django signals run in the same thread as the caller? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic

Answer : Django signals do not run in the same thread as the caller by default
"""

import threading
from django.db.models.signals import post_save
from django.dispatch import receiver

from .models import MyModel

def my_signal_handler(sender, instance, **kwargs):
    print(f"Signal handler thread: {threading.current_thread().name}")
    # Do something with the instance here

@receiver(post_save, sender=MyModel)
def my_signal_handler_wrapper(sender, instance, **kwargs):
    threading.Thread(target=my_signal_handler, args=(sender, instance, kwargs)).start()

# Trigger the signal
my_model_instance = MyModel.objects.create(...)

"""Question 3: By default do django signals run in the same database transaction as the caller? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.

Answer : No, Django signals do not run in the same database transaction as the caller by default.
"""

from django.db import transaction
from django.db.models.signals import post_save
from django.dispatch import receiver

from .models import MyModel

@receiver(post_save, sender=MyModel)
def my_signal_handler(sender, instance, **kwargs):
    with transaction.atomic():
        # Do something with the instance and database here
        instance.field = "new_value"
        instance.save()

# Trigger the signal
my_model_instance = MyModel.objects.create(...)

"""Topic: Custom Classes in Python

Description: You are tasked with creating a Rectangle class with the following requirements:

1.	An instance of the Rectangle class requires length:int and width:int to be initialized.
2.	We can iterate over an instance of the Rectangle class
3.	When an instance of the Rectangle class is iterated over, we first get its length in the format: {'length': <VALUE_OF_LENGTH>} followed by the width {width: <VALUE_OF_WIDTH>}

"""

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def __iter__(self):
        yield {'length': self.length}
        yield {'width': self.width}

# Example usage
rect = Rectangle(5, 3)

for item in rect:
    print(item)